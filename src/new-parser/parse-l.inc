typedef int Int__type;
typedef int Bool__type;
typedef void *Type__type;
typedef void* Label__type;
typedef void Void__type;
typedef struct {} * Symbol__type;

typedef struct {unsigned int len; char *content;} * String__type;

Symbol__type intern( const char * string);
Void__type print_Int_Dec( int i);
Void__type print_String( String__type s);
void maybe_flush( void);
String__type make_heap_string( char *s);

typedef struct struct0x0805ee60 *Compound_Form__type;
typedef struct struct0x0805d760 *Form__type;
typedef void *Hash_Table__type;
typedef void *Output_Descriptor__type;
struct struct0x0805d760 {
Int__type form_type_;
};
struct struct0x0805dbd0 {
Int__type form_type_;
Symbol__type value;
};
typedef struct struct0x0805dbd0 *Symbol_Form__type;
typedef struct struct0x0805f010 *List__O__Form__C____type__type;
struct struct0x0805ee60 {
Int__type form_type_;
Symbol__type head;
Int__type garbage_;
List__O__Form__C____type__type form_list;
};
struct struct0x0805f010 {
Form__type head;
List__O__Form__C____type__type tail;
};
typedef struct struct0x0805d720 *Exit__type;
struct struct0x080b27c8 {
Form__type car;
List__O__Form__C____type__type cdr;
};
typedef Hash_Table__type Hash__O__Symbol__c__pointer__O__function__O__Symbol__c__Form__C____C____C____type__type;
struct struct0x08642378 {
void *car;
void *cdr;
};
Form__type (Symbol_Form)(Symbol__type );
Form__type (String_Form)(String__type );
void (exit)(Int__type );
void (print_Symbol)(Symbol__type );
void *(alloc_cons_cell)(void);
Hash_Table__type (make_hash_table)(void);
void (print_String)(String__type );
void (flush)(void);
void (maybe_flush)(void);
Form__type (_l__parse__Code__Sequence)(void);
Form__type (Int_Form)(Int__type );
void *(gethash)(void *, Hash_Table__type );
void *(puthash)(void *, void *, Hash_Table__type );
Form__type (Id_Form)(Symbol__type );
Form__type (Compound_Form)(Symbol__type , List__O__Form__C____type__type );
Int__type (print_form)(Form__type );
Symbol__type (intern_string)(String__type );
Int__type (read_char)(void);
void (set_parser_support_to)(String__type );
Int__type (new_peek_char)(Int__type );
Symbol__type (parse_symbol)(String__type );
Int__type (character_from_symbol)(Symbol__type );
Form__type (parse_include_filename)(String__type );
Int__type (get_point_pos)(void);
String__type (get_parsed_string_string)(Int__type , Int__type , Int__type );
String__type (substring)(Int__type , Int__type );
String__type (get_parsed_string_symbol)(Int__type , Int__type , Int__type );
Form__type (_l__parse__Type__Type)(void);
Form__type (_l__parse__parse_grammar__Grammar_Macro_End)(void);
Form__type (_l__parse__parse_grammar__Grammar_End)(void);
void (test_xml)(void);
void (test_top)(void);
void (test_type)(void);
void (init__parse_l)(void);
Form__type (_l__parse__XML_Parser__CharData)(void);
Form__type (_l__parse__XML_Parser__Tagged_Compound)(void);
List__O__Form__C____type__type (_l__parse__XML_Parser__Content_List)(void);
Form__type (_l__parse__XML_Parser__Content)(void);
Int__type (_l__parse__Top_Level__Star_Comment_End)(void);
Form__type (_l__parse__Type__Base_Type)(void);
Int__type (_l__parse__Top_Level__Comment)(void);
void (_l__parse__Top_Level__Spacing)(void);
List__O__Form__C____type__type (_l__parse__Top_Level__All)(void);
Form__type (_l__parse__Top_Level__Top)(void);
Form__type (_l__parse__Top_Level__function)(Symbol__type );
Form__type (_l__parse__Top_Level__global)(Symbol__type );
Form__type (_l__parse__Top_Level__compile_time)(Symbol__type );
Form__type (_l__parse__Top_Level__type)(Symbol__type );
Form__type (_l__parse__Top_Level__expander)(Symbol__type );
Form__type (_l__parse__Top_Level__macro)(Symbol__type );
Form__type (_l__parse__Top_Level__attribute_component)(void);
Form__type (_l__parse__Top_Level__attributes_components)(void);
Form__type (_l__parse__Top_Level__attribute)(Symbol__type );
Form__type (_l__parse__Top_Level__include)(Symbol__type );
Form__type (_l__parse__Top_Level__grammar_macro)(Symbol__type );
Form__type (_l__parse__Top_Level__grammar)(Symbol__type );
Form__type (_l__parse__Macro__let)(Symbol__type );
Form__type (_l__parse__Macro__if)(Symbol__type );
Form__type (_l__parse__Macro__loop_like)(Symbol__type );
Form__type (_l__parse__Macro__while_like)(Symbol__type );
Form__type (_l__parse__Macro__break)(Symbol__type );
Form__type (_l__parse__Macro__continue)(Symbol__type );
Form__type (_l__parse__Macro__foreach)(Symbol__type );
Form__type (_l__parse__Macro__cast)(Symbol__type );
Form__type (_l__parse__Macro__Form)(Symbol__type );
Form__type (_l__parse__Macro__XML)(Symbol__type );
Form__type (_l__parse__Type__Tuple_Type)(void);
Form__type (_l__parse__Type__Indirection_Type)(void);
Form__type (_l__parse__Type__Function_Type)(void);
Form__type (_l__parse__Type__Labeled_Type)(void);
Form__type (_l__parse__Code__Primary)(void);
Form__type (_l__parse__Code__Postfix)(void);
Form__type (_l__parse__Code__Unary_Operator)(void);
Form__type (_l__parse__Code__Multiplicative)(void);
Form__type (_l__parse__Code__Additive)(void);
Form__type (_l__parse__Code__Shift)(void);
Form__type (_l__parse__Code__Assignment)(void);
Form__type (_l__parse__Code__Relational)(void);
Form__type (_l__parse__Code__Equality)(void);
Form__type (_l__parse__Code__Bitwise_And)(void);
Form__type (_l__parse__Code__Bitwise_Xor)(void);
Form__type (_l__parse__Code__Bitwise_Ior)(void);
Form__type (_l__parse__Code__Logical_And)(void);
Form__type (_l__parse__Code__Logical_Or)(void);
List__O__Form__C____type__type (_l__parse__Code__Expression_List)(void);
Form__type (_l__parse__Code__Expression)(void);
Form__type (_l__parse__Code__Maybe_Expression)(void);
Form__type (_l__parse__Code__Maybe_Empty_Sequence)(void);
Form__type (_l__parse__Code__Non_Empty_Sequence)(void);
Int__type (_l__parse__Lexical__Comment)(void);
void (_l__parse__Lexical__Spacing)(void);
Int__type (_l__parse__Lexical__Alpha_Num)(void);
Int__type (_l__parse__Lexical__Alpha)(void);
Int__type (_l__parse__Lexical__Digit)(void);
Int__type (_l__parse__Lexical__Octal_Digit)(void);
Int__type (_l__parse__Lexical__Hexa_Digit)(void);
Int__type (_l__parse__Lexical__Decimal_Number)(void);
Int__type (_l__parse__Lexical__Hexadecimal_Number_End)(void);
Int__type (_l__parse__Lexical__Octal_Number_End)(void);
Form__type (_l__parse__Lexical__Symbol_Form)(void);
Symbol__type (_l__parse__Lexical__Symbol)(void);
Form__type (_l__parse__Lexical__Number_Form)(void);
Int__type (_l__parse__Lexical__Number)(void);
Symbol__type (_l__parse__Lexical__Id)(void);
Form__type (_l__parse__Lexical__Id_Form)(void);
Form__type (_l__parse__Lexical__String_Form)(void);
String__type (_l__parse__Lexical__String)(void);
Output_Descriptor__type current_output_descriptor;
Output_Descriptor__type stdout_output_descriptor;
Output_Descriptor__type stderr_output_descriptor;
static struct { unsigned int length; char *content; } __string_1 = { 12, "Parse error\n"};
static struct { unsigned int length; char *content; } __string_2 = { 70, "1 + XML( <fact2>4<foo>to<$1 + thing$>to</foo>24<$str;tu$></fact2>) + 3"};
static struct { unsigned int length; char *content; } __string_3 = { 93, "<fact2>4<foo>toto</foo>24<$str$></fact2>function add_three( i:Int) -> Int = i + 3 + 'toto\n' ;"};
static struct { unsigned int length; char *content; } __string_4 = { 53, "function add_three( i:Int) -> Int = i + 3 + 'toto\n' ;"};
static struct { unsigned int length; char *content; } __string_5 = { 70, "global c_output_hash:Hash<Symbol, ((Expanded_Compound_Form)-> Void)*>;"};
static struct { unsigned int length; char *content; } __string_6 = { 79, "/* tasoeu *-*-/* aa */ global parse_macro_hash:Hash<Symbol, (Symbol -> Form)*>;"};
static struct { unsigned int length; char *content; } __string_7 = { 43, "type Index = Int; type_alias Integer = Int;"};
static struct { unsigned int length; char *content; } __string_8 = { 56, "compile_time type Index = Int; type_alias Integer = Int;"};
static struct { unsigned int length; char *content; } __string_9 = { 80, "attribute Point p.name = (left( arg): name_table[p] = arg,right: name_table[p]);"};
static struct { unsigned int length; char *content; } __string_10 = { 31, "attribute Point3D p.x = p.p_.x;"};
static struct { unsigned int length; char *content; } __string_11 = { 50, "attribute Duration d.second = right:cast( Int, d);"};
static struct { unsigned int length; char *content; } __string_12 = { 172, "attribute Duration d.second = right:cast( Int, d) * 3600;attribute Duration d.minute = (right:cast( Int, cast( Int, d)*60));attribute Duration d.hour = right:cast( Int, d);"};
static struct { unsigned int length; char *content; } __string_13 = { 6, "Form: "};
static struct { unsigned int length; char *content; } __string_14 = { 1, "\n"};
static struct { unsigned int length; char *content; } __string_15 = { 88, "truc<toto**,List<Int,Float>*> -> (void*, Hash<struct { a:Int; b:List<Float>; }*, ()>)***"};
static struct { unsigned int length; char *content; } __string_16 = { 40, "$3$ + 1 + toto + 1 + Form( $ 3 $ + toto)"};
static struct { unsigned int length; char *content; } __string_17 = { 11, "id:Form = 3"};
static struct { unsigned int length; char *content; } __string_18 = { 28, "(truc == 25) 3 + 023 else 23"};
static struct { unsigned int length; char *content; } __string_19 = { 65, "loop 1 + truc: if (truc == 25) tat + toto( ta, 23) else let i = 3"};
static struct { unsigned int length; char *content; } __string_20 = { 75, "toat.truc + 22[toto] - 43(*truc  + 12, 22) + thing() + thing2( param:stuff)"};
static struct { unsigned int length; char *content; } __string_21 = { 13, "- --x - -- -y"};
static struct { unsigned int length; char *content; } __string_22 = { 7, "13 - 43"};
static struct { unsigned int length; char *content; } __string_23 = { 8, "Panic : "};
static struct { unsigned int length; char *content; } __string_24 = { 30, "Parse error: unknown definer '"};
static struct { unsigned int length; char *content; } __string_25 = { 2, "'\n"};
static struct { unsigned int length; char *content; } __string_26 = { 1, "("};
static struct { unsigned int length; char *content; } __string_27 = { 1, ","};
static struct { unsigned int length; char *content; } __string_28 = { 1, ")"};
static struct { unsigned int length; char *content; } __string_29 = { 2, "->"};
static struct { unsigned int length; char *content; } __string_30 = { 1, "="};
static struct { unsigned int length; char *content; } __string_31 = { 1, ";"};
static struct { unsigned int length; char *content; } __string_32 = { 1, ";"};
static struct { unsigned int length; char *content; } __string_33 = { 1, "="};
static struct { unsigned int length; char *content; } __string_34 = { 1, ";"};
static struct { unsigned int length; char *content; } __string_35 = { 1, "("};
static struct { unsigned int length; char *content; } __string_36 = { 1, ")"};
static struct { unsigned int length; char *content; } __string_37 = { 1, "="};
static struct { unsigned int length; char *content; } __string_38 = { 1, ";"};
static struct { unsigned int length; char *content; } __string_39 = { 1, "("};
static struct { unsigned int length; char *content; } __string_40 = { 1, ","};
static struct { unsigned int length; char *content; } __string_41 = { 1, ")"};
static struct { unsigned int length; char *content; } __string_42 = { 1, "="};
static struct { unsigned int length; char *content; } __string_43 = { 1, ";"};
static struct { unsigned int length; char *content; } __string_44 = { 4, "left"};
static struct { unsigned int length; char *content; } __string_45 = { 1, "("};
static struct { unsigned int length; char *content; } __string_46 = { 1, ":"};
static struct { unsigned int length; char *content; } __string_47 = { 1, "("};
static struct { unsigned int length; char *content; } __string_48 = { 1, ","};
static struct { unsigned int length; char *content; } __string_49 = { 1, ")"};
static struct { unsigned int length; char *content; } __string_50 = { 1, ")"};
static struct { unsigned int length; char *content; } __string_51 = { 1, "="};
static struct { unsigned int length; char *content; } __string_52 = { 1, ";"};
static struct { unsigned int length; char *content; } __string_53 = { 1, ";"};
static struct { unsigned int length; char *content; } __string_54 = { 1, "("};
static struct { unsigned int length; char *content; } __string_55 = { 1, ")"};
static struct { unsigned int length; char *content; } __string_56 = { 4, "else"};
static struct { unsigned int length; char *content; } __string_57 = { 1, "("};
static struct { unsigned int length; char *content; } __string_58 = { 1, ")"};
static struct { unsigned int length; char *content; } __string_59 = { 1, ":"};
static struct { unsigned int length; char *content; } __string_60 = { 1, "("};
static struct { unsigned int length; char *content; } __string_61 = { 2, "in"};
static struct { unsigned int length; char *content; } __string_62 = { 1, ")"};
static struct { unsigned int length; char *content; } __string_63 = { 1, "("};
static struct { unsigned int length; char *content; } __string_64 = { 1, ","};
static struct { unsigned int length; char *content; } __string_65 = { 1, ")"};
static struct { unsigned int length; char *content; } __string_66 = { 1, "("};
static struct { unsigned int length; char *content; } __string_67 = { 1, ")"};
static struct { unsigned int length; char *content; } __string_68 = { 1, "("};
static struct { unsigned int length; char *content; } __string_69 = { 1, ")"};
static struct { unsigned int length; char *content; } __string_70 = { 1, "{"};
static struct { unsigned int length; char *content; } __string_71 = { 1, ";"};
static struct { unsigned int length; char *content; } __string_72 = { 1, "}"};
static struct { unsigned int length; char *content; } __string_73 = { 1, "<"};
static struct { unsigned int length; char *content; } __string_74 = { 1, ","};
static struct { unsigned int length; char *content; } __string_75 = { 1, "("};
static struct { unsigned int length; char *content; } __string_76 = { 1, ","};
static struct { unsigned int length; char *content; } __string_77 = { 1, ")"};
static struct { unsigned int length; char *content; } __string_78 = { 1, "*"};
static struct { unsigned int length; char *content; } __string_79 = { 2, "->"};
static struct { unsigned int length; char *content; } __string_80 = { 1, "("};
static struct { unsigned int length; char *content; } __string_81 = { 1, ")"};
static struct { unsigned int length; char *content; } __string_82 = { 1, ":"};
static struct { unsigned int length; char *content; } __string_83 = { 2, "$@"};
static struct { unsigned int length; char *content; } __string_84 = { 1, "$"};
static struct { unsigned int length; char *content; } __string_85 = { 1, "$"};
static struct { unsigned int length; char *content; } __string_86 = { 1, "("};
static struct { unsigned int length; char *content; } __string_87 = { 1, ")"};
static struct { unsigned int length; char *content; } __string_88 = { 1, "{"};
static struct { unsigned int length; char *content; } __string_89 = { 1, "}"};
static struct { unsigned int length; char *content; } __string_90 = { 1, "["};
static struct { unsigned int length; char *content; } __string_91 = { 1, "]"};
static struct { unsigned int length; char *content; } __string_92 = { 1, "."};
static struct { unsigned int length; char *content; } __string_93 = { 1, "("};
static struct { unsigned int length; char *content; } __string_94 = { 1, ")"};
static struct { unsigned int length; char *content; } __string_95 = { 1, "-"};
static struct { unsigned int length; char *content; } __string_96 = { 2, "&&"};
static struct { unsigned int length; char *content; } __string_97 = { 1, "&"};
static struct { unsigned int length; char *content; } __string_98 = { 1, "*"};
static struct { unsigned int length; char *content; } __string_99 = { 2, "--"};
static struct { unsigned int length; char *content; } __string_100 = { 2, "++"};
static struct { unsigned int length; char *content; } __string_101 = { 1, "*"};
static struct { unsigned int length; char *content; } __string_102 = { 1, "+"};
static struct { unsigned int length; char *content; } __string_103 = { 1, "-"};
static struct { unsigned int length; char *content; } __string_104 = { 2, ">>"};
static struct { unsigned int length; char *content; } __string_105 = { 2, "<<"};
static struct { unsigned int length; char *content; } __string_106 = { 2, ">="};
static struct { unsigned int length; char *content; } __string_107 = { 1, ">"};
static struct { unsigned int length; char *content; } __string_108 = { 2, "<="};
static struct { unsigned int length; char *content; } __string_109 = { 1, "<"};
static struct { unsigned int length; char *content; } __string_110 = { 2, "=="};
static struct { unsigned int length; char *content; } __string_111 = { 2, "!="};
static struct { unsigned int length; char *content; } __string_112 = { 1, "|"};
static struct { unsigned int length; char *content; } __string_113 = { 1, "^"};
static struct { unsigned int length; char *content; } __string_114 = { 1, "|"};
static struct { unsigned int length; char *content; } __string_115 = { 3, "and"};
static struct { unsigned int length; char *content; } __string_116 = { 2, "or"};
static struct { unsigned int length; char *content; } __string_117 = { 1, "="};
static struct { unsigned int length; char *content; } __string_118 = { 1, ";"};
static struct { unsigned int length; char *content; } __string_119 = { 1, ";"};
static struct { unsigned int length; char *content; } __string_120 = { 1, ","};
